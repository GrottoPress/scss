////
/// Mixins
///
/// @since 0.1.0
///
/// @author [GrottoPress](https://www.grottopress.com)
/// @author [N Atta Kus Adusei](https://twitter.com/akadusei)
////

/// Full width
///
/// Used to force a full width background when
/// parent element is not full width
///
/// You should set `overflow-x: hidden;` on `<html>` and `<body>`
@mixin full-width {
    margin-right: -9999px;
    margin-left: -9999px;
    padding-right: 9999px;
    padding-left: 9999px;
}

/// Inline block
@mixin inline-block {
    display: inline-block;
    zoom: 1;
    *display: inline;
    vertical-align: top;
}

/// Inline block whitespace fix
///
/// Include this in parent of inline block element
///
/// @since 0.1.8
@mixin inline-block-whitespace-fix {
    letter-spacing: -1em;

    > * {
        letter-spacing: normal;
    }
}

/// Clear fix
@mixin clearfix {
    &::after {
        content: '';
        display: table;
        clear: both;
    }
}

/// Box Sizing
///
/// @param {string} $sizing
@mixin box-sizing($sizing) {
    box-sizing: $sizing;

    *,
    *::before,
    *::after,
    &::before,
    &::after, {
        box-sizing: inherit;
    }
}

/// Paragraph
///
/// Add top and bottom margin
///
/// @param {number} $vertical-margin [20px]
@mixin paragraph($vertical-margin: 20px) {
    margin-top: $vertical-margin;
    margin-bottom: $vertical-margin;

    &:first-child {
        margin-top: 0;
    }

    &:last-child {
        margin-bottom: 0;
    }
}

/// Center
///
/// @param {number} $width
@mixin center($width) {
    width: 100%;
    max-width: $width;
    margin-left: auto;
    margin-right: auto;
}

/// Size
///
/// @param {number} $width
/// @param {number} $height [$width]
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

/// Position
///
/// @param {string} $position [relative]
/// @param {list} $offsets [()] - Order: (top,right,bottom,left)
@mixin position($position: relative, $offsets: ()) {
    position: $position;

    @if length($offsets) > 0 {
        @if nth($offsets, 1) {
            top: nth($offsets, 1);
        }

        @if nth($offsets, 2) {
            right: nth($offsets, 2);
        }

        @if nth($offsets, 3) {
            bottom: nth($offsets, 3);
        }

        @if nth($offsets, 4) {
            left: nth($offsets, 4);
        }
    }
}

/// Screen reader text
///
/// Hide text from all except screen readers
@mixin screen-reader {
    @include position(absolute);
    @include size(1px);

    border: 0;
    clip: rect(1px, 1px, 1px, 1px);
    -webkit-clip-path: inset(50%);
    clip-path: inset(50%);
    margin: -1px;
    padding: 0;
    overflow: hidden;
    word-wrap: normal !important;
}

/// Grid
///
/// To be included in the grids wrapper
///
/// @param {map} $args -
///   'columns' {number} Number of columns
///   'gutter' {number} Size of horizontal space between columns in `%`
@mixin grid($args: ()) {
    $args: map-merge((columns: 2, gutter: 2%), $args);
    $gutter: strip-units(map-get($args, gutter)) * 1%;
    $columns: strip-units(map-get($args, columns));
    $width: (99.9% - ($gutter * ($columns - 1))) / $columns;

    @include box-sizing(border-box);

    display: flex;
    flex-wrap: wrap;

    > * {
        flex: 0 0 $width;

        &,
        &:nth-child(n) {
            margin: $gutter 0 0 $gutter;
        }

        &:nth-child(-n + #{$columns}) {
            margin-top: 0;
        }

        &:nth-child(#{$columns}n + 1) {
            margin-left: 0;
        }
    }
}
